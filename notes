The goal of this branch is to simplify the data structures used to describe
session and crypto op parameters.

- replace linked/list of cryptoini for session init with a structure
  - explicit IV length?
- replace linked/list of cryptodesc with members in struct cryptop
  - maybe require data to always be laid out as
    AAD || IV (if not sideband) || DATA || TAG/MAC
    (had to scrap this due to IPsec AH and permit arbitrary IV and
     digest offsets)
  - generate IV if needed in common code, not drivers
- add flag for hash verify rather than hash compute
- change copyto/copyback to operate on the crp instead of the fields
- permit separate in/out buffers?

- need to ensure crypto_getreq() zeroes the crp (it does)
- change for AEAD:
  - previously with AES+HMAC crda covered all of data to auth, now
    need to hash AAD region + payload.  If IV needs to be hashed,
    AAD should cover IV.

- Notes on IVs:
 - CRYPTO_F_IV_GENERATE (encrypt only)
   - generate full IV and copy to crp_iv_start before encryption
 - CRYPTO_F_IV_SEPARATE (both, cannot use with GENERATE)
   - IV is in crp_iv, crp_iv_start should be ignored
 - neither flag
   - full IV is in data stream at crp_iv_start

- AES-GCM now uses CIPHER_MODE_AEAD which ignores most of csp_auth_*
  except for csp_auth_mlen

- Eventually retire 3 separate GMAC algs and repurpose NIST_GMAC as a single
  MAC?

- Maybe retire driver HIDs with 'struct cryptocap' pointers instead?  We
  could just use a TAILQ instead of an array

- Separate session operation to rekey instead of implicit rekeying?
  Implicit klen is not really great for auth, for example

- XXX: Need to think about how to define GMAC in the new world order.  I
  think it should be CSP_MODE_DIGEST, but with csp_cipher_ivlen set?

- Yes, GMAC is CSP_MODE_DIGEST with payload area describing data to hash.
  It uses csp_ivlen.

- Maybe change crp_cipher_key to not change session key but only the
  specific operation?

- Need to figure out what to do about accelerated software vs plain
  software
  - maybe need "priority" and a "session probe/test" instead of just
    "newsession"

- Add a reference count on sessions
  - crypto_getop would take a session pointer and set crp_session along
    with bumping refcount now

- Kill the UIO usage in cryptodev.c, it's silly (done)

- GCM IV length is kind of busted, perhaps need IV length as part of crp
  instead of csp?

- Testing
  + cryptocheck
    + soft
    + ccr
  - ipsec
    - auth
      - hmac-md5
      - hmac-sha1
      - keyed-md5
      - keyed-sha1
      - null
      - hmac-sha2-256
      - hmac-sha2-384
      - hmac-sha2-512
      - hmac-ripemd160
      - aes-xcbc-mac
      - tcp-md5
    - encrypt
      - des-cbc
      - 3desc-cbc
      - null
      - blowfish-cbc
      - cast128-cbc
      - des-deriv
      - des-32iv
      - rijndael-cbc
      - aes-ctr
      - aes-gcm16
      - camellia-cbc

    - 3des-hmac-md5
      + soft
    - aes-cbc-hmac-sha
      + soft
    - aes-cbc
      + soft
    - aes-ctr-hmac-sha2-512
      + soft
    - aes-ctr
      + soft
    - aes-gcm-256
      + soft
    - aes-gcm
      + soft
    - blowfish
      + soft
    - camellia
      + soft
    - cast128
      + soft
    - des-32iv
      + soft
    - des-deriv
      + soft
    - hmac-sha1
      + soft
    - hmac-sha2-256
      + soft
    - hmac-sha2-384
      + soft
    - hmac-sha2-512
      + soft
    - ipcomp
      - doesn't work with stock FreeBSD
    - null-ipcomp
      - doesn't work with stock FreeBSD
    - null
      + soft
    - rijndael-hmac-sha2-256
      + soft
    - rijndael
      + soft
    - tcp-md5
      - needs kernel with TCP_SIGNATURE

- Tested with cryptocheck (re-check)
  - cryptosoft
  - aesni
  - blake2
  - ccr

- Needs testing:
  - ccp
  - aesni with sha
  - hifn
  - kgssapi_krb5
  - ubsec
  - padlock
  - safe
  - geom
  - armv8_crypto (aarch64)
  - glxsb (i386)
  - sec (ppc)
  - cesa (armv7)
  - cryptocteon (mips64)
  - nlmsec (mips64)

- Benchmarks
  - aes-gcm setup
    - frodo
      - kldload ipsec
      - ifconfig cc0 inet 172.16.0.1/24 alias
      - setkey -f /mnt/jhb/work/git/netperf/IPSEC/Configs/source-aes-gcm-256.conf
      - netperf -H 172.16.0.2 -cC
    - sam
      - kldload ipsec
      - ifconfig cc0 inet 172.16.0.2/24 alias
      - setkey -f /mnt/jhb/work/git/netperf/IPSEC/Configs/dut-aes-gcm-256.conf
      - netserver
  - clean svn (r348883)
    - no ipsec		44000	18%	25%
    - null		5500	28%	28%
    - aes-gcm
      - cryptosoft	550	26%	17%
      - aesni		3000	28%	26%
      - ccr		4300	45%	45%
  - ocf_rework (r348883)
    - no ipsec		44000	18%	25%
    - null		5800	28%	28%
    - aes-gcm
      - cryptosoft	580	26%	17%
      - aesni		3000	28%	26%
      - ccr		4300	45%	45%

  - ktls using aes-gcm
    - frodo
      - ktls.sh
      - kldload ktls_ocf
      - service nginx start
    - sam
      - normal ktls client
  - clean svn (r354096)
    - cryptosoft	2.9 Gbps	76-80% CPU
    - aesni		27 Gbps		63-66% CPU
    - ccr		30 Gbps		46-44% CPU
  - ocf_rework (r354096)
    - cryptosoft	2.9 Gbps	100% CPU
    - aesni		27 Gbps		63-66% CPU
    - ccr		30 Gbps		40-44% CPU

- steps to convert a driver
  - add probesession
  - cri -> csp
  - crd -> crp fields
  - axe crypto_register

+ rename CRYPTO_BUF_IOV -> CRYPTO_BUF_UIO
+ make key pointers const in csp and crp
  (keep drivers from XOR'ing keys with IPAD/OPAD)
+ kill klen in crp (assume they match session)
  + allow NULL keys during setup but require klen to be
    set during probesession / newsession, also have to require a key
    when processing
- change klen to bytes?
- sysctl node to list crypto drivers
  - update python test to use this
- update places for new sysctl names

+ csp_lookup_hash() returns auth_hash *?
+ csp_lookup_cipher() returns enc_xform *?

+ pull checks into crypto_newsession
  + checks on mlen
  + csp_auth_klen 0 vs !0
